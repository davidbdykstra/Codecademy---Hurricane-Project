# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

# test function by updating damages (Step 2)
def update_damage(updated_damages):
  for value in damages:
    if "B" in value:
      updated_damages.append(float(value.strip("B'")) * conversion.get("B"))
    elif "M" in value:
      updated_damages.append(float(value.strip("M'")) * conversion.get("M"))
    else:
      updated_damages.append(value)

updated_damages = []
update_damage(updated_damages)
print("\n-------------------------\n")
print(updated_damages)


# 2 
# Create a Table
def create_dict2():
  index = 0
  for name in names:
    hurricanes2[name]={"Name": names[index], "Month": months[index], "Year": years[index], "Max Sustained Wind": max_sustained_winds[index], "Areas Affected": areas_affected[index], "Damage": damages[index], "Deaths": deaths[index]}
    index += 1

def create_dict():
  index = 0
  for name in names:
    hurricanes_by_name[name]={"Name": names[index], "Month": months[index], "Year": years[index], "Max Sustained Wind": max_sustained_winds[index], "Areas Affected": areas_affected[index], "Damage": updated_damages[index], "Deaths": deaths[index]}
    index += 1

# Create and view the hurricanes dictionary
hurricanes_by_name = {}
create_dict()
hurricanes2={}
create_dict2()

print("\n-------------------------\nList of storm Data:")
for storm in hurricanes_by_name:
  print("\n"+storm, hurricanes_by_name[storm])

#print(hurricanes_by_name)

# 3
# Organizing by Year

def by_year():
  index = 0
  for name in hurricanes_by_name:
    storm = hurricanes_by_name[name]
    year = hurricanes_by_name[name]['Year']
    if year in hurricanes_by_year:
      #storm added to existing year
      hurricanes_by_year[year].append(storm)
    else:#works
      #new year and storm added to list
      hurricanes_by_year[year]=[storm]

# create a new dictionary of hurricanes with year and key
hurricanes_by_year = {}
by_year()
check_year=1932
#print("Test", check_year, hurricanes_by_year[check_year])
check_year=1933
#print("Test", check_year, hurricanes_by_year[check_year])


# 4
# Counting Damaged Areas
area_affected={}
# create dictionary of areas to store the number of hurricanes involved in

def damage_count():
  for name in hurricanes_by_name:
    for area in hurricanes_by_name[name]["Areas Affected"]:
      if area in area_affected:
        area_affected[area] += 1
      else:
        area_affected[area] = 1
  return area_affected
  
damage_count()
print("\n-------------------------\nAffected Areas:")
print(area_affected)

# 5 
# Calculating Maximum Hurricane Count
def max_affected():
  max_area = max(area_affected, key = area_affected.get)
  max_num = max(area_affected.values())
  print("\n-------------------------\n")
  print("Most affected area:", max_area, "with", max_num, "storms.")
  
# find most frequently affected area and the number of hurricanes involved in
max_affected()


# 6
# Calculating the Deadliest Hurricane
def find_max_deaths():
  max_deaths = 0
  for name in hurricanes_by_name:
    if hurricanes_by_name[name]["Deaths"] > max_deaths:
      max_deaths = hurricanes_by_name[name]["Deaths"]
      max_deaths_storm = name

  print("\n-------------------------\n")
  print("Storm with most deaths:", max_deaths_storm, "with", max_deaths, "deaths.")

# find highest mortality hurricane and the number of deaths
find_max_deaths()

# 7
# Rating Hurricanes by Mortality
def rate_storm_mortality(storm):
  storm_mortality={}
  zero=[]
  one=[]
  two=[]
  three=[]
  four=[]
  five=[]

  mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}
  
  #print("----------")
  for name,x in storm.items():
    if storm[name]["Deaths"] > mortality_scale[4]:
      storm_data = {name: storm[name]["Deaths"]}
      #print(storm_data)
      five.append(storm_data)
      storm_mortality[5]=five

    elif storm[name]["Deaths"] > mortality_scale[3]:
      storm_data = {name: storm[name]["Deaths"]}
      #print(storm_data)
      four.append(storm_data)
      storm_mortality[4]=four
 
    elif storm[name]["Deaths"] > mortality_scale[2]:
      storm_data = {name: storm[name]["Deaths"]}
      #print(storm_data)
      three.append(storm_data)
      storm_mortality[3]=three
 
    elif storm[name]["Deaths"] > mortality_scale[1]:
      storm_data = {name: storm[name]["Deaths"]}
      #print(storm_data)
      two.append(storm_data)
      storm_mortality[2]=two
 
    elif storm[name]["Deaths"] > mortality_scale[0]:
      storm_data = {name: storm[name]["Deaths"]}
      #print(storm_data)
      one.append(storm_data)
      storm_mortality[1]=one
      
    else:
      storm_data = {name: storm[name]["Deaths"]}
      #print(storm_data)
      zero.append(storm_data)
      storm_mortality[0]=zero
       
  return storm_mortality

#categorize hurricanes in new dictionary with mortality severity as key

storm_death_rating = rate_storm_mortality(hurricanes_by_name)
print("\n-------------------------\nStorm Deaths by Rating:")
for key in sorted(storm_death_rating):
  print("\n{} -- {}".format(key, storm_death_rating[key]))



# 8 Calculating Hurricane Maximum Damage
def storm_damage(storm):
  max_damage = 0
  for name in storm:
    
    if storm[name]["Damage"] == "Damages not recorded":
      continue
    elif storm[name]["Damage"] > max_damage:
      max_damage = storm[name]["Damage"]
      max_damage_storm = name
    else:
      continue
 
  return (max_damage_storm, max_damage)

# find highest damage inducing hurricane and its total cost

max = storm_damage(hurricanes_by_name)
print("\n-------------------------\n")
print("The storm that caused the most damage is ", max[0], "with $" + str(max[1]), "damage.")


# 9
# Rating Hurricanes by Damage

def rate_storm_damage(storm):
  storm_damage={}
  zero=[]
  one=[]
  two=[]
  three=[]
  four=[]
  five=[]

  damage_scale = {0: 0.0,
                1: 100000000.0,
                2: 1000000000.0,
                3: 10000000000.0,
                4: 50000000000.0}

  #print("----------")
  #print(storm)
  for name,x in storm.items():
    #print(name, storm[name]["Damage"])
    if storm[name]["Damage"] == "Damages not recorded":
      storm_data = {name: storm[name]["Damage"]}
      #print(storm_data)
      zero.append(storm_data)
      storm_damage[0]=zero

    elif storm[name]["Damage"] > damage_scale[4]:
      storm_data = {name: storm[name]["Damage"]}
      #print(storm_data)
      five.append(storm_data)
      storm_damage[5]=five

    elif storm[name]["Damage"] > damage_scale[3]:
      storm_data = {name: storm[name]["Damage"]}
      #print(storm_data)
      four.append(storm_data)
      storm_damage[4]=four
 
    elif storm[name]["Damage"] > damage_scale[2]:
      storm_data = {name: storm[name]["Damage"]}
      #print(storm_data)
      three.append(storm_data)
      storm_damage[3]=three
 
    elif storm[name]["Damage"] > damage_scale[1]:
      storm_data = {name: storm[name]["Damage"]}
      #print(storm_data)
      two.append(storm_data)
      storm_damage[2]=two
 
    elif storm[name]["Damage"] > damage_scale[0]:
      storm_data = {name: storm[name]["Damage"]}
      #print(storm_data)
      one.append(storm_data)
      storm_damage[1]=one
      
    else:
      storm_data = {name: storm[name]["Damage"]}
      #print(storm_data)
      zero.append(storm_data)
      storm_damage[0]=zero
       
  return storm_damage

#categorize hurricanes in new dictionary with mortality severity as key

storm_damage_rating = rate_storm_damage(hurricanes_by_name)
print("\n-------------------------\nStorm Damage by Rating:")
for key in sorted(storm_damage_rating):
  print("\n{} -- {}".format(key, storm_damage_rating[key]))

# categorize hurricanes in new dictionary with damage severity as key
